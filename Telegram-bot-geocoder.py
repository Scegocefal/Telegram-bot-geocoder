import os
import logging
from urllib.parse import quote_plus
import json
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from dotenv import load_dotenv
import requests

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('.env')

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)

bot = Bot(token=os.getenv("TELEGRAM_TOKEN"))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

class RouteStates(StatesGroup):
    waiting_for_location = State()
    waiting_for_address = State()

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await message.answer("üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É, –¥–∞–ª–µ–µ '–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è').")
    await state.set_state(RouteStates.waiting_for_location)

@dp.message(
    F.content_type == "location",
    RouteStates.waiting_for_location
)
async def process_location(message: types.Message, state: FSMContext):
    await state.update_data(
        lat=message.location.latitude,
        lon=message.location.longitude
    )
    await message.answer("üì¨ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ì–æ—Ä–æ–¥, –£–ª–∏—Ü–∞ –¥–æ–º\n–ü—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –ê—Ä–±–∞—Ç 15")
    await state.set_state(RouteStates.waiting_for_address)

@dp.message(RouteStates.waiting_for_address)
async def process_address(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    start_lat = user_data["lat"]
    start_lon = user_data["lon"]
    address = message.text.strip()

    try:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
        logging.info(f"–ü–æ–ª—É—á–µ–Ω –∞–¥—Ä–µ—Å: {address}")

        # –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è URL
        formatted_address = quote_plus(address)
        geocoder_url = (
            f"https://geocode-maps.yandex.ru/1.x/?apikey={os.getenv('YANDEX_API_KEY')}"
            f"&geocode={formatted_address}&format=json"
        )
        logging.info(f"–ó–∞–ø—Ä–æ—Å –∫ API: {geocoder_url}")

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        response = requests.get(geocoder_url)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP –æ—à–∏–±–æ–∫

        # –ü–∞—Ä—Å–∏–Ω–≥ JSON
        data = response.json()
        logging.info(f"–û—Ç–≤–µ—Ç API:\n{json.dumps(data, indent=2, ensure_ascii=False)}")

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        features = data.get("response", {}).get("GeoObjectCollection", {}).get("featureMember", [])
        if not features:
            await message.answer("‚ùå –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –ê—Ä–±–∞—Ç 15")
            return

        first_result = features[0].get("GeoObject", {})
        pos = first_result.get("Point", {}).get("pos", "")
        if not pos:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç")
            return

        end_lon, end_lat = map(float, pos.split())
        yandex_maps_url = f"https://yandex.ru/maps/?rtext={start_lat},{start_lon}~{end_lat},{end_lon}"
        await message.answer(f"‚úÖ –ú–∞—Ä—à—Ä—É—Ç: {yandex_maps_url}")

    except requests.exceptions.HTTPError as e:
        logging.error(f"–û—à–∏–±–∫–∞ API: {e.response.status_code} {e.response.text}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API-–∫–ª—é—á –Ø–Ω–¥–µ–∫—Å")
    except json.JSONDecodeError as e:
        logging.error(f"–û—à–∏–±–∫–∞ JSON: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        await message.answer("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞")

    await state.clear()

if __name__ == '__main__':
    dp.run_polling(bot)